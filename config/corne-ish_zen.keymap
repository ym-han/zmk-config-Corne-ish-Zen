/*
*
* Adapted from smores (https://github.com/smores56/zmk-config/blob/main/config/base.keymap) and https://github.com/jimmerricks/zmk-config/blob/main/config/flea.keymap and https://sites.google.com/alanreiser.com/handsdown Hands Down Gold
* SPDX-License-Identifier: MIT
*
*/

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>


#define MAIN 0
#define SYM_LMOD 1
#define NUM_RMOD 2
#define NAV 3
#define FN 4

&sl {
    release-after-ms = <5000>;
    quick-release;
};
&sk {
    release-after-ms = <10000>;
};

&mt {
    flavor = "tap-preferred";
    tapping_term_ms = <180>;
};

#define AS(keycode) &as LS(keycode) keycode



/ {

    macros {
        vim_insert_mode: vim_insert_mode {
            label = "ZM_insert_mode";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp ESC>
                , <&macro_press &kp I>
                ;
        };
    };


    behaviors {
        as: auto_shift {
            compatible = "zmk,behavior-hold-tap";
            label = "AUTO_SHIFT";
            #binding-cells = <2>;
            tapping_term_ms = <135>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };

        s_col: s_col {
            compatible = "zmk,behavior-mod-morph";
            label = "S_COL";
            #binding-cells = <0>;
            bindings = <&kp SEMI>, <&kp COLON>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        dot_amp: dot_amp {
            compatible = "zmk,behavior-mod-morph";
            label = "DOT_AMP";
            #binding-cells = <0>;
            bindings = <&kp DOT>, <&kp AMPS>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        min_plus: min_plus {
            compatible = "zmk,behavior-mod-morph";
            label = "MIN_PLUS";
            #binding-cells = <0>;
            bindings = <&kp MINUS>, <&kp PLUS>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        fsh_as: fsh_as {
            compatible = "zmk,behavior-mod-morph";
            label = "FSH_AS";
            #binding-cells = <0>;
            bindings = <&kp FSLH>, <&kp ASTERISK>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        com_pipe: com_pipe {
            compatible = "zmk,behavior-mod-morph";
            label = "COM_PIPE";
            #binding-cells = <0>;
            bindings = <&kp COMMA>, <&kp PIPE>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        dqt_qn: dqt_qn {
            compatible = "zmk,behavior-mod-morph";
            label = "DQT_QN";
            #binding-cells = <0>;
            bindings = <&kp DQT>, <&kp QMARK>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        sqt_bg: sqt_bg {
            compatible = "zmk,behavior-mod-morph";
            label = "SQT_BG";
            #binding-cells = <0>;
            bindings = <&kp SQT>, <&kp EXCL>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };


        comma_at: comma_at {
            compatible = "zmk,behavior-mod-morph";
            label = "COMMA_AT";
            #binding-cells = <0>;
            bindings = <&kp COMMA>, <&kp AT>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };


        lbkt_rbkt: lbkt_rbkt {
            compatible = "zmk,behavior-mod-morph";
            label = "LBKT_RBKT";
            #binding-cells = <0>;
            bindings = <&kp LBKT>, <&kp RBKT>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };


        und_crt: und_crt {
            compatible = "zmk,behavior-mod-morph";
            label = "UND_CRT";
            #binding-cells = <0>;
            bindings = <&kp UNDER>, <&kp CARET>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        lpn_rpn: lpn_rpn {
            compatible = "zmk,behavior-mod-morph";
            label = "LPN_RPN";
            #binding-cells = <0>;
            bindings = <&kp LPAR>, <&kp RPAR>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        skq: sticky_key_quick_release {
            compatible = "zmk,behavior-sticky-key";
            label = "STICKY_KEY_QUICK_RELEASE";
            #binding-cells = <1>;
            bindings = <&kp>;
            release-after-ms = <1000>;
            quick-release;
        };
    };


        /* Combo key positions
         0  1  2  3  4  5    6  7  8  9 10 11
        12 13 14 15 16 17   18 19 20 21 22 23 
        24 25 26 27 28 29   30 31 32 33 34 35 
                 36 37 38   39 40 41             */

    combos {
        compatible = "zmk,combos";


        combo_tab {
            timeout-ms = <30>;
            key-positions = <3 4>;
            bindings = <&kp TAB>;
            layers = <0 1 2 3>;
        };

        combo_equal {
            timeout-ms = <30>;
            key-positions = <7 8>;
            bindings = <&kp EQUAL>;
            layers = <0 1 2>;
        };

        combo_esc {
            timeout-ms = <30>;
            key-positions = <15 26>;
            bindings = <&kp ESC>;
        };

//        combo_esc_i {
//            timeout-ms = <30>;
//            key-positions = <15 28>;
//            bindings = <&vim_insert_mode>;
//            layers = <0 1 2 3>;
//        };


        combo_leftprn {
            timeout-ms = <30>;
            key-positions = <20 31>;
            bindings = <&kp LPAR>;
            layers = <0 1 2 3>;
        };

        combo_rightprn {
            timeout-ms = <30>;
            key-positions = <20 33>;
            bindings = <&kp RPAR>;
            layers = <0 1 2 3>;
        };

        combo_leftbrkt {
            timeout-ms = <30>;
            key-positions = <21 32>;
            bindings = <&kp LBKT>;
            layers = <0 1 2 3>;
        };

        combo_rightbrkt {
            timeout-ms = <30>;
            key-positions = <21 34>;
            bindings = <&kp RBKT>;
            layers = <0 1 2 3>;
        };



        // ----- modifiers ---------
        combo_shift {
            timeout-ms = <30>;
            key-positions = <16 17>;
            bindings = <&kp TAB>;
            layers = <0 3>;
        };

        combo_lgui {
            timeout-ms = <30>;
            key-positions = <15 16>;
            bindings = <&kp LGUI>;
            layers = <0 3>;
        };


        // ----- nav related ---------
        // ADD: Ctrl left, ctrl right
        combo_toggle_nav_layer {
            timeout-ms = <30>;
            key-positions = <32 33>;
            bindings = <&kp &tog NAV>;
            layers = <0 1 2 3>;
        };


        combo_pgup {
            timeout-ms = <30>;
            key-positions = <21 33>;
            bindings = <&kp PG_UP>;
            layers = <0 3>;
        };

        combo_pgdown {
            timeout-ms = <30>;
            key-positions = <22 34>;
            bindings = <&kp PG_DN>;
            layers = <0 3>;
        };

        combo_leftarrow {
            timeout-ms = <30>;
            key-positions = <19 20>;
            bindings = <&kp LEFT_ARROW>;
            layers = <0 3>;
        };

        combo_rightarrow {
            timeout-ms = <30>;
            key-positions = <20 21>;
            bindings = <&kp RIGHT_ARROW>;
            layers = <0 3>;
        };

        combo_uparrow {
            timeout-ms = <30>;
            key-positions = <8 9>;
            bindings = <&kp UP_ARROW>;
            layers = <0 3>;
        };

        combo_downarrow {
            timeout-ms = <30>;
            key-positions = <31 32>;
            bindings = <&kp RIGHT_ARROW>;
            layers = <0 3>;
        };

        // move across tabs of same app
        combo_ctrltab {
            timeout-ms = <30>;
            key-positions = <18 19>;
            bindings = <&kp LC(TAB)>;
            layers = <0 3>;
        };

        // ----- talon and vimac ---------
        combo_toggle_talonspeech {
            timeout-ms = <30>;
            key-positions = <27 28>;
            bindings = <&kp LG(LA(LS(S)))>;
            layers = <0 1 2 3>;
        };

        combo_toggle_vimac {
            timeout-ms = <30>;
            key-positions = <26 27>;
            bindings = <&kp LC(LA(LS(V)))>;
            layers = <0 1 2 3>;
        };

        combo_talonmouse {
            timeout-ms = <30>;
            key-positions = <26 27 28>;
            bindings = <&kp LG(LA(LS(M)))>;
            layers = <0 1 2 3>;
        };

        // click and right click: 30 19, 19 32
        // zoom in and zoom out
        // ==
        // left and right brace

    };




    keymap {
        compatible = "zmk,keymap";

                MAIN_layer {
// -----------------------------------------------------------------------------------------
// |      |  J  |  G  |  M  |  P  |  V  |   |  ;: |  .&  |  /* |  "? |  '! |      |
// |   0  |  R  |  S  |  N  |  D  |  B  |   |  ,| |  A   |  E  |  I  |  H  |      |
// |   Z  |  X  |  F  |  L  |  C  |  W  |   |  -+ |  U   |  O  |  Y  |  K  |   Q  |
//                    |     | SYMD|  T  |   | SPC | NUMOD|     |
                        bindings = <
   &none     AS(J) AS(G) AS(M) AS(P) AS(V)       &s_col     &dot_amp  &fsh_as &kp DQT_QN &kp SQT_BG  &none
   &kp N0    AS(R) AS(S) AS(N) AS(D) AS(B)       &com_pipe  AS(A)        AS(E)  AS(I)  AS(H)   &none
   AS(Z) AS(X) AS(F) AS(L) AS(C) AS(W)           &min_plus  AS(U)        AS(O)  AS(Y)  AS(K)   AS(Q)
                                 &none &sl SYM_LMOD  &kp AS(T)       &kp SPACE     &to NUM_RMOD  &kp none
                        >;
                };

                SYM_LMOD_layer {
// CAGS home row mod order is optimized for mac https://precondition.github.io/home-row-mods#cags
// -----------------------------------------------------------------------------------------
// |     | CTL-TB | ALT-P | CMD-TB | CAPS  |      |   |  `   |  {   |  #  |  }  |     |    |
// |     |  CTRL  | ALT   | SHIFT  | CMD   |PSCRN |   |  <   |  (   |  >  |  )  |     |    |
// |     |        | CMD-W | CMD-Q  | C-S-4 |      |   |  _   |  [   |  @  |  %  |  ~  |    |
//                        |        | CTL-L |CTL-R |   | ENTER| BSPC |     |
                        bindings = <
&kp none &kp LC(TAB) &kp LA(P)   &kp LGUI(TAB) &kp CAPS       &none              &kp GRAVE &kp LBRC  &kp HASH &kp RBRC  &none  &none
&kp none &sk LCTRL   &sk LALT    &sk LGUI      &skq LSHFT     &kp PSCRN          &kp LT    &kp LPAR  &kp GT   &kp RPAR  &none  &none
&kp none &none       &kp LGUI(W) &kp LGUI(Q)   &kp LG(LS(N4)) &none              &kp UNDER &kp LBKT  &kp AT   &kp PRCNT &kp TILDE &none
                                 &none         &kp LC(LEFT)   &kp LC(RIGHT)      &kp ENTER &kp BSPC  &none   
                        >;
                };

                NUM_RMOD_layer {
/*
// -----------------------------------------------------------------------------------------
// |      |  !  |  7  |  8  |  9  |     |   |  ^  | .&  |  #  |  \  |     |      |
// |      |  |  |  1  |  2  |  3  | ()  |   |  -+ | SHFT| CTL |  =  |  [] |  `   |
// |      |     |  4  |  5  |  6  | TAB |   |  _^ | CMD |S-CMD|  }  | "|" |  ~   |
//                    | GUI |     | SPC |   | ENT |     | ALT |
*/
                        bindings = <
   &none    &kp EXCL &kp N7 &kp N8 &kp N9   &none              &dot_amp   &fsh_as  &kp HASH     &kp BSLH  &none         &none
   &none    &kp PIPE &kp N1 &kp N2 &kp N3   &kp LPN_RPN        &min_plus  &skq RSHFT  &sk RCTRL    &kp EQUAL &kp LBKT_RBKT &none
   &none    &none    &kp N4 &kp N5 &kp N6   &TAB               &kp UND_CRT   &sk RGUI    &sk LS(RGUI) &kp RBRC  &kp DLLR &none
                    	     &none &kp BSPC &kp N0                &kp SPACE     &to MAIN    &none
                        >;
                };


                NAV_layer {
                    bindings = <
    &none      &none    &kp C_VOL_DN &kp C_VOL_UP &kp C_NEXT &kp C_MUTE      &sk RA(GUI) &kp LG(D)     &kp LS(LG(D)) &kp LG(Q)  &none         &none
    &kp C_PREV &kp LEFT &kp UP     &kp DOWN       &kp RIGHT  &kp C_PP        &sk RALT    &kp LG(LEFT)  &kp LG(DOWN)  &kp LG(UP) &kp LG(RIGHT) &none
    &none      &kp HOME &kp PG_UP  &kp PG_DN      &kp END    &kp C_STOP      &sk RCTRL   &kp LG(ENTER) &kp LG(O)     &kp LG(N)  &sk RA(RCTRL) &none
                                   &none          &none      &none           &kp DEL     &sk RSHFT     &none
                    >;
                };
        };
};
